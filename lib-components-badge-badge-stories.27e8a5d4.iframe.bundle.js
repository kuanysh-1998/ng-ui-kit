(self.webpackChunkng_ui_kit=self.webpackChunkng_ui_kit||[]).push([[525],{"./projects/ng-ui-kit-lib/src/lib/components/badge/badge.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".ng-badge {\n  display: block;\n  width: fit-content;\n  height: fit-content;\n}\n.ng-badge__container {\n  box-sizing: border-box;\n  display: flex;\n  flex-wrap: nowrap;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  cursor: default;\n  border-radius: 8px;\n  font-family: PTRootUI;\n  font-weight: 700;\n  font-style: Bold;\n  font-size: 12px;\n  line-height: 16px;\n  letter-spacing: 0.5%;\n}\n.ng-badge__container_medium {\n  gap: 2px;\n  height: 24px;\n  padding: 4px 6px;\n}\n.ng-badge__container_medium.ng-badge__container_with-icon {\n  padding-left: 4px;\n}\n.ng-badge__container_medium.ng-badge__container_with-icon-right {\n  padding-right: 4px;\n}\n.ng-badge__container_medium.ng-badge__container_only-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  padding: 4px 4px;\n}\n.ng-badge__container_medium.ng-badge__container_only-icon .ng-badge__text {\n  display: none;\n}\n.ng-badge__container_small {\n  gap: 2px;\n  height: 20px;\n  padding: 2px 4px;\n}\n.ng-badge__container_small.ng-badge__container_with-icon {\n  padding-left: 4px;\n}\n.ng-badge__container_small.ng-badge__container_with-icon-right {\n  padding-right: 4px;\n}\n.ng-badge__container_small.ng-badge__container_only-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  padding: 4px 4px;\n}\n.ng-badge__container_small.ng-badge__container_only-icon .ng-badge__text {\n  display: none;\n}\n.ng-badge__container_large {\n  gap: 4px;\n  height: 28px;\n  padding: 6px 6px;\n  min-width: 69px;\n}\n.ng-badge__container_large.ng-badge__container_only-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 28px;\n  padding: 4px 4px;\n}\n.ng-badge__container_large.ng-badge__container_only-icon .ng-badge__text {\n  display: none;\n}\n.ng-badge__container_contained.ng-badge__container_default {\n  color: var(--white);\n  background: var(--brand-blue);\n}\n.ng-badge__container_contained.ng-badge__container_default .ng-badge__icon {\n  fill: var(--white);\n}\n.ng-badge__container_contained.ng-badge__container_secondary {\n  color: var(--almost-black);\n  background: var(--gray-lightest);\n}\n.ng-badge__container_contained.ng-badge__container_secondary .ng-badge__icon {\n  fill: var(--almost-black);\n}\n.ng-badge__container_contained.ng-badge__container_warning {\n  color: var(--white);\n  background: #d9822f;\n}\n.ng-badge__container_contained.ng-badge__container_warning .ng-badge__icon {\n  fill: var(--white);\n}\n.ng-badge__container_contained.ng-badge__container_error {\n  color: var(--white);\n  background: var(--error-red);\n}\n.ng-badge__container_contained.ng-badge__container_error .ng-badge__icon {\n  fill: var(--white);\n}\n.ng-badge__container_contained.ng-badge__container_success {\n  color: var(--white);\n  background: var(--success-green);\n}\n.ng-badge__container_contained.ng-badge__container_success .ng-badge__icon {\n  fill: var(--white);\n}\n.ng-badge__container_outlined.ng-badge__container_default {\n  color: var(--brand-blue);\n  background: var(--brand-blue-10);\n  border: 1px solid var(--brand-blue);\n}\n.ng-badge__container_outlined.ng-badge__container_default .ng-badge__icon {\n  fill: var(--brand-blue);\n}\n.ng-badge__container_outlined.ng-badge__container_secondary {\n  color: var(--gray-dark);\n  background: var(--gray-lightest);\n  border: 1px solid var(--border-light);\n}\n.ng-badge__container_outlined.ng-badge__container_secondary .ng-badge__icon {\n  fill: var(--gray-dark);\n}\n.ng-badge__container_outlined.ng-badge__container_error {\n  color: var(--error-red);\n  background: var(--error-red-light);\n  border: 1px solid var(--error-red);\n}\n.ng-badge__container_outlined.ng-badge__container_error .ng-badge__icon {\n  fill: var(--error-red);\n}\n.ng-badge__container_outlined.ng-badge__container_success {\n  color: var(--success-green);\n  background: var(--success-green-light);\n  border: 1px solid var(--success-green);\n}\n.ng-badge__container_outlined.ng-badge__container_success .ng-badge__icon {\n  fill: var(--success-green);\n}\n.ng-badge__container_outlined.ng-badge__container_warning {\n  color: #d9822f;\n  background: var(--warning-yellow-10);\n  border: 1px solid #d9822f;\n}\n.ng-badge__container_outlined.ng-badge__container_warning .ng-badge__icon {\n  fill: #d9822f;\n}\n.ng-badge__container_ghost.ng-badge__container_default {\n  color: var(--brand-blue);\n}\n.ng-badge__container_ghost.ng-badge__container_default .ng-badge__icon {\n  fill: var(--brand-blue);\n}\n.ng-badge__container_ghost.ng-badge__container_secondary {\n  color: var(--gray-dark);\n}\n.ng-badge__container_ghost.ng-badge__container_secondary .ng-badge__icon {\n  fill: var(--gray-dark);\n}\n.ng-badge__container_ghost.ng-badge__container_warning {\n  color: #d9822f;\n}\n.ng-badge__container_ghost.ng-badge__container_warning .ng-badge__icon {\n  fill: #d9822f;\n}\n.ng-badge__container_ghost.ng-badge__container_error {\n  color: var(--error-red);\n}\n.ng-badge__container_ghost.ng-badge__container_error .ng-badge__icon {\n  fill: var(--error-red);\n}\n.ng-badge__container_ghost.ng-badge__container_success {\n  color: var(--success-green);\n}\n.ng-badge__container_ghost.ng-badge__container_success .ng-badge__icon {\n  fill: var(--success-green);\n}\n.ng-badge__container.ng-badge__container_is-icon {\n  width: auto;\n  height: auto;\n  min-width: 20px;\n  min-height: 20px;\n  padding: 2px;\n}\n.ng-badge__container.ng-badge__container_is-icon .ng-badge__text {\n  display: block;\n  white-space: nowrap;\n}\n.ng-badge__icon_clickable {\n  cursor: pointer;\n}\n.ng-badge__text {\n  display: -webkit-box;\n  overflow: hidden;\n  text-decoration: none;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 1;\n  word-break: break-all;\n  -webkit-box-orient: vertical;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./projects/ng-ui-kit-lib/src/lib/components/badge/badge.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllSizes:()=>AllSizes,AllVariants:()=>AllVariants,ClickableIcons:()=>ClickableIcons,Default:()=>Default,IconOnly:()=>IconOnly,LongText:()=>LongText,WithBothIcons:()=>WithBothIcons,WithIcon:()=>WithIcon,WithRightIcon:()=>WithRightIcon,__namedExportsOrder:()=>__namedExportsOrder,default:()=>badge_stories});var dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),common_module=__webpack_require__("./node_modules/@angular/common/fesm2022/common_module.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var badge_componentngResource=__webpack_require__("./projects/ng-ui-kit-lib/src/lib/components/badge/badge.component.scss?ngResource"),badge_componentngResource_default=__webpack_require__.n(badge_componentngResource),debug_node=__webpack_require__("./node_modules/@angular/core/fesm2022/debug_node.mjs"),root_effect_scheduler=__webpack_require__("./node_modules/@angular/core/fesm2022/root_effect_scheduler.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),tooltip_component=__webpack_require__("./projects/ng-ui-kit-lib/src/lib/components/tooltip/tooltip.component.ts"),svg_component=__webpack_require__("./projects/ng-ui-kit-lib/src/lib/components/svg/svg.component.ts");let BadgeComponent=class BadgeComponent{_elRef;size="medium";stylingMode="contained";variant="default";asIcon=!1;iconClickable=!1;iconRightClickable=!1;enableTooltip=!0;tooltipPosition="top";text="";icon;iconRight;token=void 0;clickedIcon=new debug_node.bkB;clickedIconRight=new debug_node.bkB;isOverflowing=(0,root_effect_scheduler.vPA)(!1);_resizeObserver;_badgeText;get badgeClasses(){return{"ng-badge__container":!0,[`ng-badge__container_${this.size}`]:!0,[`ng-badge__container_${this.stylingMode}`]:!0,[`ng-badge__container_${this.variant}`]:!0,"ng-badge__container_with-icon":!!this.icon,"ng-badge__container_with-icon-right":!!this.iconRight,"ng-badge__container_is-icon":this.asIcon,"ng-badge__container_only-icon":!((this.text||!this.icon)&&(!this.iconRight||this.text)||this.icon&&this.iconRight)}}constructor(_elRef){this._elRef=_elRef}ngOnInit(){this.isOverflowing.set(this.enableTooltip)}ngAfterViewInit(){this.enableTooltip&&(this._checkOverflow(),this._initTooltipSub())}ngOnDestroy(){this._resizeObserver&&this._resizeObserver.disconnect()}clickIcon(){this.iconClickable&&this.clickedIcon.emit()}clickIconRight(){this.iconRightClickable&&this.clickedIconRight.emit()}_initTooltipSub(){this._resizeObserver=new ResizeObserver(()=>this._checkOverflow()),this._resizeObserver.observe(this._elRef.nativeElement)}_checkOverflow(){const badgeElement=this._elRef.nativeElement,textElement=this._badgeText.nativeElement;this.isOverflowing.set(textElement.offsetHeight>badgeElement.offsetHeight)}static ctorParameters=()=>[{type:debug_node.aKT}];static propDecorators={size:[{type:debug_node.pde}],stylingMode:[{type:debug_node.pde}],variant:[{type:debug_node.pde}],asIcon:[{type:debug_node.pde}],iconClickable:[{type:debug_node.pde}],iconRightClickable:[{type:debug_node.pde}],enableTooltip:[{type:debug_node.pde}],tooltipPosition:[{type:debug_node.pde}],text:[{type:debug_node.pde}],icon:[{type:debug_node.pde}],iconRight:[{type:debug_node.pde}],token:[{type:debug_node.pde}],clickedIcon:[{type:debug_node.k7i}],clickedIconRight:[{type:debug_node.k7i}],_badgeText:[{type:core.ViewChild,args:["badgeText",{static:!0}]}]}};BadgeComponent=(0,tslib_es6.Cg)([(0,debug_node.uAl)({selector:"ng-badge",imports:[common_module.MD,svg_component.k,tooltip_component.b],template:'<div class="ng-badge">\n  <div #badgeWrapper [ngClass]="badgeClasses">\n    @if (icon) {\n    <ng-svg\n      [icon]="icon"\n      [class.ng-badge__icon_clickable]="iconClickable"\n      (click)="clickIcon()"\n      size="small"\n      class="ng-badge__icon"\n    ></ng-svg>\n    }\n\n    <span [attr.data-token]="token" class="ng-badge__text">\n      <span #badgeText>{{ text }}</span>\n    </span>\n\n    @if (iconRight) {\n    <ng-svg\n      [icon]="iconRight"\n      [class.ng-badge__icon_clickable]="iconRightClickable"\n      (click)="clickIconRight()"\n      size="small"\n      class="ng-badge__icon"\n    ></ng-svg>\n    }\n  </div>\n\n  @if (isOverflowing()) {\n  <ng-tooltip\n    [for]="badgeWrapper"\n    [content]="text ?? \'\'"\n    [position]="tooltipPosition"\n  ></ng-tooltip>\n  }\n</div>\n',changeDetection:debug_node.Ngq.OnPush,styles:[badge_componentngResource_default()]})],BadgeComponent);var svg_config=__webpack_require__("./projects/ng-ui-kit-lib/src/lib/components/svg/svg.config.ts");const badge_stories={title:"Components/Badge",component:BadgeComponent,tags:["autodocs"],decorators:[(0,dist.Iz)({imports:[common_module.MD]})],args:{text:"Badge",size:"medium",stylingMode:"contained",variant:"default",asIcon:!1,iconClickable:!1,iconRightClickable:!1,enableTooltip:!0,tooltipPosition:"top"},argTypes:{text:{control:"text",description:"**@Input** text - Текст бейджа.",table:{type:{summary:"string | number"},defaultValue:{summary:'""'}}},size:{control:"radio",options:["small","medium","large"],description:"**@Input** size - Размер бейджа.",table:{type:{summary:'"small" | "medium" | "large"'},defaultValue:{summary:'"medium"'}}},stylingMode:{control:"radio",options:["contained","outlined","ghost"],description:"**@Input** stylingMode - Стиль бейджа.",table:{type:{summary:'"contained" | "outlined" | "ghost"'},defaultValue:{summary:'"contained"'}}},variant:{control:"select",options:["default","secondary","warning","error","success"],description:"**@Input** variant - Вариант оформления бейджа.",table:{type:{summary:'"default" | "secondary" | "warning" | "error" | "success"'},defaultValue:{summary:'"default"'}}},asIcon:{control:"boolean",description:"**@Input** asIcon - Флаг, определяющий, является ли бейдж иконкой.",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}}},iconClickable:{control:"boolean",description:"**@Input** iconClickable - Флаг, определяющий, кликабельна ли левая иконка.",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}}},iconRightClickable:{control:"boolean",description:"**@Input** iconRightClickable - Флаг, определяющий, кликабельна ли правая иконка.",table:{type:{summary:"boolean"},defaultValue:{summary:"false"}}},enableTooltip:{control:"boolean",description:"**@Input** enableTooltip - Флаг, определяющий, включен ли тултип.",table:{type:{summary:"boolean"},defaultValue:{summary:"true"}}},tooltipPosition:{control:"select",options:["top","bottom","left","right"],description:"**@Input** tooltipPosition - Позиция тултипа.",table:{type:{summary:'"top" | "bottom" | "left" | "right"'},defaultValue:{summary:'"top"'}}},icon:{control:"select",options:[null,...Object.values(svg_config.F)],description:"**@Input** icon - Иконка слева от текста.",table:{type:{summary:"string | undefined"},defaultValue:{summary:"undefined"}}},iconRight:{control:"select",options:[null,...Object.values(svg_config.F)],description:"**@Input** iconRight - Иконка справа от текста.",table:{type:{summary:"string | undefined"},defaultValue:{summary:"undefined"}}},token:{control:"text",description:"**@Input** token - Токен для идентификации.",table:{type:{summary:"string | undefined"},defaultValue:{summary:"undefined"}}},clickedIcon:{description:"**@Output** clickedIcon - Событие, вызываемое при клике на левую иконку.",action:"clickedIcon"},clickedIconRight:{description:"**@Output** clickedIconRight - Событие, вызываемое при клике на правую иконку.",action:"clickedIconRight"}}},Default={args:{}},WithIcon={args:{text:"With Icon",icon:svg_config.F.Spinner}},WithRightIcon={args:{text:"With Right Icon",iconRight:svg_config.F.Spinner}},WithBothIcons={args:{text:"Both Icons",icon:svg_config.F.Spinner,iconRight:svg_config.F.Spinner}},IconOnly={args:{icon:svg_config.F.Spinner,asIcon:!0}},ClickableIcons={args:{text:"Clickable Icons",icon:svg_config.F.Spinner,iconRight:svg_config.F.Spinner,iconClickable:!0,iconRightClickable:!0}},LongText={args:{text:"This is a very long text that should trigger tooltip functionality when enabled",enableTooltip:!0}},AllVariants=args=>({template:'\n      <div style="display: flex; flex-direction: column; gap: 30px;">\n        <div>\n          <h3>Все варианты (contained)</h3>\n          <div style="display: flex; flex-wrap: wrap; gap: 8px;">\n            <ng-badge \n              *ngFor="let variant of variants" \n              [variant]="variant" \n              [text]="variant"\n              stylingMode="contained">\n            </ng-badge>\n          </div>\n        </div>\n\n        <div>\n          <h3>Все размеры</h3>\n          <div style="display: flex; align-items: center; gap: 8px;">\n            <ng-badge \n              *ngFor="let size of sizes" \n              [size]="size" \n              text="Size"\n              variant="default"\n              stylingMode="contained">\n            </ng-badge>\n          </div>\n        </div>\n\n        <div>\n          <h3>Все стили</h3>\n          <div style="display: flex; flex-wrap: wrap; gap: 8px;">\n            <ng-badge \n              *ngFor="let mode of stylingModes" \n              [stylingMode]="mode" \n              text="Style"\n              variant="default">\n            </ng-badge>\n          </div>\n        </div>\n\n        <div>\n          <h3>С иконками</h3>\n          <div style="display: flex; flex-wrap: wrap; gap: 8px;">\n            <ng-badge text="Left Icon" [icon]="icon" variant="default"></ng-badge>\n            <ng-badge text="Right Icon" [iconRight]="icon" variant="secondary"></ng-badge>\n            <ng-badge text="Both Icons" [icon]="icon" [iconRight]="icon" variant="warning"></ng-badge>\n            <ng-badge [icon]="icon" variant="error" asIcon="true"></ng-badge>\n          </div>\n        </div>\n\n        <div>\n          <h3>Кликабельные иконки</h3>\n          <div style="display: flex; flex-wrap: wrap; gap: 8px;">\n            <ng-badge \n              text="Clickable Left" \n              [icon]="icon" \n              variant="success"\n              [iconClickable]="true"\n              (clickedIcon)="onIconClick()">\n            </ng-badge>\n            <ng-badge \n              text="Clickable Right" \n              [iconRight]="icon" \n              variant="default"\n              [iconRightClickable]="true"\n              (clickedIconRight)="onIconRightClick()">\n            </ng-badge>\n          </div>\n        </div>\n      </div>\n    ',props:{...args,variants:["default","secondary","warning","error","success"],sizes:["small","medium","large"],stylingModes:["contained","outlined","ghost"],icon:svg_config.F.Spinner,onIconClick:()=>console.log("Left icon clicked"),onIconRightClick:()=>console.log("Right icon clicked")}}),AllSizes=args=>({template:'\n      <div style="display: flex; flex-direction: column; gap: 20px;">\n        <div *ngFor="let size of sizes">\n          <h3>{{ size | titlecase }} Size</h3>\n          <div style="display: flex; flex-wrap: wrap; gap: 8px;">\n            <ng-badge \n              *ngFor="let variant of variants" \n              [size]="size"\n              [variant]="variant" \n              [text]="variant"\n              stylingMode="contained">\n            </ng-badge>\n          </div>\n        </div>\n      </div>\n    ',props:{...args,variants:["default","secondary","warning","error","success"],sizes:["small","medium","large"]}}),__namedExportsOrder=["Default","WithIcon","WithRightIcon","WithBothIcons","IconOnly","ClickableIcons","LongText","AllVariants","AllSizes"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {}\n}",...Default.parameters?.docs?.source}}},WithIcon.parameters={...WithIcon.parameters,docs:{...WithIcon.parameters?.docs,source:{originalSource:'{\n  args: {\n    text: "With Icon",\n    icon: Icons.Spinner as any\n  }\n}',...WithIcon.parameters?.docs?.source}}},WithRightIcon.parameters={...WithRightIcon.parameters,docs:{...WithRightIcon.parameters?.docs,source:{originalSource:'{\n  args: {\n    text: "With Right Icon",\n    iconRight: Icons.Spinner as any\n  }\n}',...WithRightIcon.parameters?.docs?.source}}},WithBothIcons.parameters={...WithBothIcons.parameters,docs:{...WithBothIcons.parameters?.docs,source:{originalSource:'{\n  args: {\n    text: "Both Icons",\n    icon: Icons.Spinner as any,\n    iconRight: Icons.Spinner as any\n  }\n}',...WithBothIcons.parameters?.docs?.source}}},IconOnly.parameters={...IconOnly.parameters,docs:{...IconOnly.parameters?.docs,source:{originalSource:"{\n  args: {\n    icon: Icons.Spinner as any,\n    asIcon: true\n  }\n}",...IconOnly.parameters?.docs?.source}}},ClickableIcons.parameters={...ClickableIcons.parameters,docs:{...ClickableIcons.parameters?.docs,source:{originalSource:'{\n  args: {\n    text: "Clickable Icons",\n    icon: Icons.Spinner as any,\n    iconRight: Icons.Spinner as any,\n    iconClickable: true,\n    iconRightClickable: true\n  }\n}',...ClickableIcons.parameters?.docs?.source}}},LongText.parameters={...LongText.parameters,docs:{...LongText.parameters?.docs,source:{originalSource:'{\n  args: {\n    text: "This is a very long text that should trigger tooltip functionality when enabled",\n    enableTooltip: true\n  }\n}',...LongText.parameters?.docs?.source}}},AllVariants.parameters={...AllVariants.parameters,docs:{...AllVariants.parameters?.docs,source:{originalSource:'(args: object): unknown => {\n  const variants = ["default", "secondary", "warning", "error", "success"];\n  const sizes = ["small", "medium", "large"];\n  const stylingModes = ["contained", "outlined", "ghost"];\n  return {\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 30px;">\n        <div>\n          <h3>Все варианты (contained)</h3>\n          <div style="display: flex; flex-wrap: wrap; gap: 8px;">\n            <ng-badge \n              *ngFor="let variant of variants" \n              [variant]="variant" \n              [text]="variant"\n              stylingMode="contained">\n            </ng-badge>\n          </div>\n        </div>\n\n        <div>\n          <h3>Все размеры</h3>\n          <div style="display: flex; align-items: center; gap: 8px;">\n            <ng-badge \n              *ngFor="let size of sizes" \n              [size]="size" \n              text="Size"\n              variant="default"\n              stylingMode="contained">\n            </ng-badge>\n          </div>\n        </div>\n\n        <div>\n          <h3>Все стили</h3>\n          <div style="display: flex; flex-wrap: wrap; gap: 8px;">\n            <ng-badge \n              *ngFor="let mode of stylingModes" \n              [stylingMode]="mode" \n              text="Style"\n              variant="default">\n            </ng-badge>\n          </div>\n        </div>\n\n        <div>\n          <h3>С иконками</h3>\n          <div style="display: flex; flex-wrap: wrap; gap: 8px;">\n            <ng-badge text="Left Icon" [icon]="icon" variant="default"></ng-badge>\n            <ng-badge text="Right Icon" [iconRight]="icon" variant="secondary"></ng-badge>\n            <ng-badge text="Both Icons" [icon]="icon" [iconRight]="icon" variant="warning"></ng-badge>\n            <ng-badge [icon]="icon" variant="error" asIcon="true"></ng-badge>\n          </div>\n        </div>\n\n        <div>\n          <h3>Кликабельные иконки</h3>\n          <div style="display: flex; flex-wrap: wrap; gap: 8px;">\n            <ng-badge \n              text="Clickable Left" \n              [icon]="icon" \n              variant="success"\n              [iconClickable]="true"\n              (clickedIcon)="onIconClick()">\n            </ng-badge>\n            <ng-badge \n              text="Clickable Right" \n              [iconRight]="icon" \n              variant="default"\n              [iconRightClickable]="true"\n              (clickedIconRight)="onIconRightClick()">\n            </ng-badge>\n          </div>\n        </div>\n      </div>\n    `,\n    props: {\n      ...args,\n      variants,\n      sizes,\n      stylingModes,\n      icon: Icons.Spinner as any,\n      onIconClick: () => console.log("Left icon clicked"),\n      onIconRightClick: () => console.log("Right icon clicked")\n    }\n  };\n}',...AllVariants.parameters?.docs?.source}}},AllSizes.parameters={...AllSizes.parameters,docs:{...AllSizes.parameters?.docs,source:{originalSource:'(args: object): unknown => {\n  const variants = ["default", "secondary", "warning", "error", "success"];\n  const sizes = ["small", "medium", "large"];\n  return {\n    template: `\n      <div style="display: flex; flex-direction: column; gap: 20px;">\n        <div *ngFor="let size of sizes">\n          <h3>{{ size | titlecase }} Size</h3>\n          <div style="display: flex; flex-wrap: wrap; gap: 8px;">\n            <ng-badge \n              *ngFor="let variant of variants" \n              [size]="size"\n              [variant]="variant" \n              [text]="variant"\n              stylingMode="contained">\n            </ng-badge>\n          </div>\n        </div>\n      </div>\n    `,\n    props: {\n      ...args,\n      variants,\n      sizes\n    }\n  };\n}',...AllSizes.parameters?.docs?.source}}}}}]);